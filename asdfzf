#!/usr/bin/env bash
set -euo pipefail

ASDF_DATA_DIR="${ASDF_DATA_DIR:-$HOME/.asdf}"
ASDF_PLUGIN_PATH="${ASDF_DATA_DIR}/plugins"
ASDF_INSTALL_PATH="${ASDF_DATA_DIR}/installs"
ASDF_REPOSITORY_PATH="${ASDF_DATA_DIR}/repository"


__list_installed_plugins() {
  local plugin_dir="${ASDF_PLUGIN_PATH}"
  if [[ -d "${plugin_dir}" ]]; then
    for entry in $plugin_dir/*; do
      echo ${entry##*/}
    done | sort
  fi
}

__select_installed_plugin() {
    __list_installed_plugins | fzf
}

__color_installed() {
    awk '
        BEGIN {
            green="\033[32m";
            red="\033[31m";
            reset="\033[0m";
        }
        /(installed)/{
            print green $0 reset;
            next;
        }
        {
            print red $0 reset;
        }'
}

__list_all_supported_plugins() {
  local plugin_dir="${ASDF_REPOSITORY_PATH}/plugins"
  if [[ -d "$plugin_dir" ]]; then
    for entry in $plugin_dir/*; do
      echo ${entry##*/}
    done
  fi
}

__list_all_plugins() {
    join -t ' ' -a 1 \
        <( __list_all_supported_plugins | sort ) \
        <( __list_installed_plugins | awk '{print $1 " (installed)"}' | sort ) |
        __color_installed
}


__list_current() {
    asdf current 2>&1 | awk '{ print $1,$2 }' | column -t
}


__select_available_plugins() {
    plugins=$( __list_all_plugins )
    cat <( echo "$plugins" | grep "installed" ) \
        <( echo "$plugins" | grep -v "installed" ) |
    fzf -m --tac --ansi | awk '{ print $1 }'
}

__select_installed_plugins() {
    plugins=$( __list_all_plugins )
    cat <( echo "$plugins" | grep -v "installed" ) \
        <( echo "$plugins" | grep "installed" ) |
    fzf -m --tac --ansi | awk '{ print $1 }'
}

__version_filter() {
    # Allow user-defined command to filter versions.
    # Custom commands are either per tool with ASDFZF_VERSION_FILTER_COMMAND_plugin
    # where plugin is the name of the plugin that installs the tool
    # or defined globally with ASDFZF_VERSION_FILTER_COMMAND
    #
    # builtin filters are also selectable with ASDFZF_VERSION_FILTER_plugin
    # and ASDFZF_VERSION_FILTER for global selection

    varname="ASDFZF_VERSION_FILTER_COMMAND_$1"
    if [[ -n "${!varname:-}" ]]; then
        echo "${!varname}"
        return
    fi
    varname="ASDFZF_VERSION_KEEP_$1"
    if [[ -n "${!varname:-}" ]]; then
        filter="${!varname}"
    fi
    if [[ -z "${filter:-}" ]]; then
        if [[ -n "${ASDFZF_VERSION_FILTER_COMMAND:-}" ]]; then
            echo "$ASDFZF_VERSION_FILTER_COMMAND"
            return
        fi
        filter="${ASDFZF_VERSION_KEEP:-all}"
    fi
    case "$filter" in
        all)
            echo "cat"
            ;;
        semver-no-prerelease)
            echo "sed -E -n '/^[0-9]+(\.[0-9]+)*(\+[0-9A-Za-z\.-]+)*$/p'"
            ;;
        semver-only-prerelease)
            echo "sed -E -n '/^[0-9]+(\.[0-9]+)*-[0-9A-Za-z\.-]+(\+[0-9A-Za-z\.-]+)*/p'"
            ;;
        *)
            echo "Unknown version filter: $filter" >&2
            exit 1
            ;;
    esac
}

__list_all_versions() {
    version_filter=$( __version_filter "$1" )
    join -t ' ' -a 1 \
        <( asdf list-all "$1" 2>/dev/null | awk '{print $1}' | eval "$version_filter" | sort ) \
        <( __list_installed_versions "$1" | sort ) |
        sort -V | __color_installed
}

__list_installed_versions() {
  local plugin_dir="${ASDF_INSTALL_PATH}/$1"
  if [[ -d "${plugin_dir}" ]]; then
    for entry in $plugin_dir/*; do
      echo ${entry##*/}
    done | sort | awk '{print $1 " (installed)"}'
  fi
}

__select_installed_version() {
    __list_installed_versions "$1" | __color_installed
    fzf --tac --ansi --no-sort | awk '{ print $1 }'
}

__select_installed_versions() {
    __list_installed_versions $1 | __color_installed
    fzf -m --tac --ansi --no-sort | awk '{ print $1 }'
}

__select_available_versions() {
    versions=$( __list_all_versions "$1" )
    cat <(echo "$versions" | grep "installed") \
        <(echo "$versions" | grep -v "installed") |\
    fzf -m --tac --ansi --no-sort | awk '{ print $1 }'
}


__get_current_version() {
    set +e
    asdf current terraform | awk '{ print $1 }'
    set -e
}

__multi() {
    xargs -t -r -n 1 "$@"
}

_install() {
    plugin=$( __select_installed_plugin )
    __select_available_versions "$plugin" | __multi asdf install "$plugin"
}

_uninstall() {
    plugin=$( __select_installed_plugin )
    __select_installed_versions "$plugin" | __multi asdf uninstall "$plugin"
}

_plugin-add() {
    __select_available_plugins | __multi asdf plugin-add
}

_plugin-remove() {
    __select_installed_plugins | __multi asdf plugin-remove
}


_list() {
    plugin=$( __select_installed_plugin )
    __list_all_versions "$plugin" | grep installed
}

_list-all() {
    plugin=$( __select_installed_plugin )
    __list_all_versions "$plugin"
}

_global() {
    plugin=$( __select_installed_plugin )
    version=$( __select_installed_version "$plugin" )
    asdf global "$plugin" "$version"
}

_local() {
    plugin=$( __select_installed_plugin )
    version=$( __select_installed_version "$plugin" )
    asdf local "$plugin" "$version"
}

_current() {
     __list_current | fzf
}



__list_operations() {
    cat <<-EOF
install
uninstall
plugin-add
plugin-remove
list
list-all
local
global
current
EOF
}

__select_operation() {
    __list_operations | fzf
}

main() {
    operation=$(__select_operation)
    _$operation
}

main
